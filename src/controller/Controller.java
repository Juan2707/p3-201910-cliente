package controller;

import java.util.Scanner;

import view.MovingViolationsManagerView;

public class Controller {

	// Componente vista (consola)
	private MovingViolationsManagerView view;

	//TODO Definir los atributos de estructuras de datos del modelo del mundo del proyecto


	/**
	 * Metodo constructor
	 */
	public Controller()
	{
		view = new MovingViolationsManagerView();
	}

	/**
	 * Metodo encargado de ejecutar los  requerimientos segun la opcion indicada por el usuario
	 */
	public void run(){

		long startTime;
		long endTime;
		long duration;

		Scanner sc = new Scanner(System.in);
		boolean fin = false;


		while(!fin){
			view.printMenu();

			int option = sc.nextInt();
			int idVertice1 = 0;
			int idVertice2 = 0;


			switch(option){

			case 0:
				String RutaArchivo = "";
				view.printMessage("Escoger el grafo a cargar: (1) Downtown  o (2)Ciudad Completa.");
				int ruta = sc.nextInt();
				if(ruta == 1)
					RutaArchivo = ""; //TODO Dar la ruta del archivo de Downtown
				else
					RutaArchivo = ""; //TODO Dar la ruta del archivo de la ciudad completa

				startTime = System.currentTimeMillis();
				loadJSON(RutaArchivo);
				endTime = System.currentTimeMillis();
				duration = endTime - startTime;
				view.printMessage("Tiempo del requerimiento: " + duration + " milisegundos");
				// TODO Informar el total de v√©rtices y el total de arcos que definen el grafo cargado
				break;



			case 1:

				view.printMessage("Ingrese El id del primer vertice (Ej. 901839): ");
				idVertice1 = sc.nextInt();
				view.printMessage("Ingrese El id del segundo vertice (Ej. 901839): ");
				idVertice2 = sc.nextInt();

				
				startTime = System.currentTimeMillis();
				caminoCostoMinimoA1(idVertice1, idVertice2);
				endTime = System.currentTimeMillis();
				duration = endTime - startTime;
				view.printMessage("Tiempo del requerimiento: " + duration + " milisegundos");
				/* 
				TODO Consola: Mostrar el camino a seguir con sus v√©rtices (Id, Ubicaci√≥n Geogr√°fica),
				el costo m√≠nimo (menor cantidad de infracciones), y la distancia estimada (en Km).

				TODO Google Maps: Mostrar el camino resultante en Google Maps 
				(incluyendo la ubicaci√≥n de inicio y la ubicaci√≥n de destino).
				 */
				break;

			case 2:
				view.printMessage("2A. Consultar los N vÔøΩrtices con mayor nÔøΩmero de infracciones. Ingrese el valor de N: ");
				int n = sc.nextInt();

				
				startTime = System.currentTimeMillis();
				mayorNumeroVerticesA2(n);
				endTime = System.currentTimeMillis();
				duration = endTime - startTime;
				view.printMessage("Tiempo del requerimiento: " + duration + " milisegundos");
				/* 
				TODO Consola: Mostrar la informacion de los n vertices 
				(su identificador, su ubicaci√≥n (latitud, longitud), y el total de infracciones) 
				Mostra el n√∫mero de componentes conectadas (subgrafos) y los  identificadores de sus vertices 

				TODO Google Maps: Marcar la localizaci√≥n de los v√©rtices resultantes en un mapa en
				Google Maps usando un color 1. Destacar la componente conectada m√°s grande (con
				m√°s v√©rtices) usando un color 2. 
				 */
				break;

			case 3:			

				view.printMessage("Ingrese El id del primer vertice (Ej. 901839): ");
				idVertice1 = sc.nextInt();
				view.printMessage("Ingrese El id del segundo vertice (Ej. 901839): ");
				idVertice2 = sc.nextInt();

				
				startTime = System.currentTimeMillis();
				caminoLongitudMinimoaB1(idVertice1, idVertice2);
				endTime = System.currentTimeMillis();
				duration = endTime - startTime;
				view.printMessage("Tiempo del requerimiento: " + duration + " milisegundos");

				/*
				   TODO Consola: Mostrar  el camino a seguir, informando
					el total de v√©rtices, sus v√©rtices (Id, Ubicaci√≥n Geogr√°fica) y la distancia estimada (en Km).

				   TODO Google Maps: Mostre el camino resultante en Google Maps (incluyendo la
					ubicaci√≥n de inicio y la ubicaci√≥n de destino).
				 */
				break;

			case 4:		
				double lonMin;
				double lonMax;
				view.printMessage("Ingrese la longitud minima (Ej. -87,806): ");
				lonMin = sc.nextDouble();
				view.printMessage("Ingrese la longitud mÔøΩxima (Ej. -87,806): ");
				lonMax = sc.nextDouble();

				view.printMessage("Ingrese la latitud minima (Ej. 44,806): ");
				double latMin = sc.nextDouble();
				view.printMessage("Ingrese la latitud mÔøΩxima (Ej. 44,806): ");
				double latMax = sc.nextDouble();

				view.printMessage("Ingrese el nÔøΩmero de columnas");
				int columnas = sc.nextInt();
				view.printMessage("Ingrese el nÔøΩmero de filas");
				int filas = sc.nextInt();

				
				startTime = System.currentTimeMillis();
				definirCuadriculaB2(lonMin,lonMax,latMin,latMax,columnas,filas);
				endTime = System.currentTimeMillis();
				duration = endTime - startTime;
				view.printMessage("Tiempo del requerimiento: " + duration + " milisegundos");
				/*
				   TODO Consola: Mostrar el n√∫mero de v√©rtices en el grafo
					resultado de la aproximaci√≥n. Mostar el identificador y la ubicaci√≥n geogr√°fica de cada
					uno de estos v√©rtices. 

				   TODO Google Maps: Marcar las ubicaciones de los v√©rtices resultantes de la
					aproximaci√≥n de la cuadr√≠cula en Google Maps.
				 */
				break;

			case 5:
				
				startTime = System.currentTimeMillis();
				arbolMSTKruskalC1();
				endTime = System.currentTimeMillis();
				duration = endTime - startTime;
				view.printMessage("Tiempo del requerimiento: " + duration + " milisegundos");
				/*
				   TODO Consola: Mostrar los v√©rtices (identificadores), los arcos incluidos (Id v√©rtice inicial e Id v√©rtice
					final), y el costo total (distancia en Km) del √°rbol.

				   TODO Google Maps: Mostrar el √°rbol generado resultante en Google Maps: sus v√©rtices y sus arcos.
				 */

				break;

			case 6:
				
				startTime = System.currentTimeMillis();
				arbolMSTPrimC2();
				endTime = System.currentTimeMillis();
				duration = endTime - startTime;
				view.printMessage("Tiempo del requerimiento: " + duration + " milisegundos");
				/*
				   TODO Consola: Mostrar los v√©rtices (identificadores), los arcos incluidos (Id v√©rtice inicial e Id v√©rtice
				 	final), y el costo total (distancia en Km) del √°rbol.

				   TODO Google Maps: Mostrar el √°rbol generado resultante en Google Maps: sus v√©rtices y sus arcos.
				 */
				break;

			case 7:
				
				startTime = System.currentTimeMillis();
				caminoCostoMinimoDijkstraC3();
				endTime = System.currentTimeMillis();
				duration = endTime - startTime;
				view.printMessage("Tiempo del requerimiento: " + duration + " milisegundos");
				/*
				   TODO Consola: Mostrar de cada camino resultante: su secuencia de v√©rtices (identificadores) y su costo (distancia en Km).

				   TODO Google Maps: Mostrar los caminos de costo m√≠nimo en Google Maps: sus v√©rtices
					y sus arcos. Destaque el camino m√°s largo (en distancia) usando un color diferente
				 */
				break;

			case 8:
				view.printMessage("Ingrese El id del primer vertice (Ej. 901839): ");
				idVertice1 = sc.nextInt();
				view.printMessage("Ingrese El id del segundo vertice (Ej. 901839): ");
				idVertice2 = sc.nextInt();
				
				startTime = System.currentTimeMillis();
				caminoMasCortoC4(idVertice1, idVertice2);
				endTime = System.currentTimeMillis();
				duration = endTime - startTime;
				view.printMessage("Tiempo del requerimiento: " + duration + " milisegundos");
				/*
				   TODO Consola: Mostrar del camino resultante: su secuencia de v√©rtices (identificadores), 
				   el total de infracciones y la distancia calculada (en Km).

				   TODO Google Maps: Mostrar  el camino resultante en Google Maps: sus v√©rtices y sus arcos.	  */
				break;

			case 9: 	
				fin = true;
				sc.close();
				break;
			}
		}
	}
	
	
	// TODO El tipo de retorno de los mÈtodos puede ajustarse seg˙n la conveniencia


	/**
	 * Cargar el Grafo No Dirigido de la malla vial: Downtown o Ciudad Completa
	 * @param rutaArchivo 
	 */

	public void loadJSON(String rutaArchivo) 
	{
		// TODO Auto-generated method stub
	}


	// TODO El tipo de retorno de los mÈtodos puede ajustarse seg˙n la conveniencia
	/**
	 * Requerimiento 1A: Encontrar el camino de costo mÔøΩnimo para un viaje entre dos ubicaciones geogrÔøΩficas.
	 * @param idVertice2 
	 * @param idVertice1 
	 */
	public void caminoCostoMinimoA1(int idVertice1, int idVertice2) {
		// TODO Auto-generated method stub
	}

	// TODO El tipo de retorno de los mÈtodos puede ajustarse seg˙n la conveniencia
	/**
	 * Requerimiento 2A: Determinar los n vÔøΩrtices con mayor nÔøΩmero de infracciones. Adicionalmente identificar las
	 * componentes conectadas (subgrafos) que se definan ÔøΩnicamente entre estos n vÔøΩrtices
	 * @param  int n: numero de vertices con mayor numero de infracciones  
	 */
	public void mayorNumeroVerticesA2(int n) {
		// TODO Auto-generated method stub

	}

	// TODO El tipo de retorno de los mÈtodos puede ajustarse seg˙n la conveniencia
	/**
	 * Requerimiento 1B: Encontrar el camino mÔøΩs corto para un viaje entre dos ubicaciones geogrÔøΩficas 
	 * @param idVertice2 
	 * @param idVertice1 
	 */
	public void caminoLongitudMinimoaB1(int idVertice1, int idVertice2) {
		// TODO Auto-generated method stub

	}

	// TODO El tipo de retorno de los mÈtodos puede ajustarse seg˙n la conveniencia
	/**
	 * Requerimiento 2B:  Definir una cuadricula regular de N columnas por M filas. que incluya las longitudes y latitudes dadas
	 * @param  lonMin: Longitud minima presente dentro de la cuadricula
	 * @param  lonMax: Longitud maxima presente dentro de la cuadricula
	 * @param  latMin: Latitud minima presente dentro de la cuadricula
	 * @param  latMax: Latitud maxima presente dentro de la cuadricula
	 * @param  columnas: Numero de columnas de la cuadricula
	 * @param  filas: Numero de filas de la cuadricula
	 */
	public void definirCuadriculaB2(double lonMin, double lonMax, double latMin, double latMax, int columnas,
			int filas) {
		// TODO Auto-generated method stub
	}

	// TODO El tipo de retorno de los mÈtodos puede ajustarse seg˙n la conveniencia
	/**
	 * Requerimiento 1C:  Calcular un ÔøΩrbol de expansiÔøΩn mÔøΩnima (MST) con criterio distancia, utilizando el algoritmo de Kruskal.
	 */
	public void arbolMSTKruskalC1() {
		// TODO Auto-generated method stub

	}

	// TODO El tipo de retorno de los mÈtodos puede ajustarse seg˙n la conveniencia
	/**
	 * Requerimiento 2C: Calcular un ÔøΩrbol de expansiÔøΩn mÔøΩnima (MST) con criterio distancia, utilizando el algoritmo de Prim. (REQ 2C)
	 */
	public void arbolMSTPrimC2() {
		// TODO Auto-generated method stub

	}

	// TODO El tipo de retorno de los mÈtodos puede ajustarse seg˙n la conveniencia
	/**
	 * Requerimiento 3C: Calcular los caminos de costo mÔøΩnimo con criterio distancia que conecten los vÔøΩrtices resultado
	 * de la aproximaciÔøΩn de las ubicaciones de la cuadricula N x M encontrados en el punto 5.
	 */
	public void caminoCostoMinimoDijkstraC3() {
		// TODO Auto-generated method stub

	}
	
	// TODO El tipo de retorno de los mÈtodos puede ajustarse seg˙n la conveniencia
	/**
	 * Requerimiento 4C:Encontrar el camino mÔøΩs corto para un viaje entre dos ubicaciones geogrÔøΩficas escogidas aleatoriamente al interior del grafo.
	 * @param idVertice2 
	 * @param idVertice1 
	 */
	public void caminoMasCortoC4(int idVertice1, int idVertice2) {
		// TODO Auto-generated method stub

	}

}
